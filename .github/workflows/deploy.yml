# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "load_branch" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Push-Data-To-DVC:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Install python dependencies 
        run: pip install -r requirements.txt
      
      - name: Set DVC Remotes
        run: dvc remote modify --local resident_data sas_token ${{ secrets.DVC_SAS_TOKEN }}
      
      # Runs a set of commands using the runners shell
      - name: Release data to DVC remote
        run: 
          dvc push

  Deploy-Backend:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

       # Step 2: Install the Heroku CLI
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # Step 3: Log in to Heroku Docker Registry
      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
          heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}

      # Step 4: Build and Push the Docker Image
      - name: Build and Push Docker Image to Heroku
        run: |
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web ./backend
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      # Step 5: Release the Docker Container
      - name: Release Docker Container
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}




